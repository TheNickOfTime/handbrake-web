name: Docker Publish

on:
  push:
    branches:
      - main
      - release/**
    paths:
      - .github/workflows/docker-publish.yaml
      - client/**
      - docker/**
      - server/**
      - shared/**
      - worker/**
      - package.json
      - pnpm-lock.yaml
      - pnpm-workspace.yaml
  pull_request:
    branches:
      - main
      - release/**
    paths:
      - .github/workflows/docker-publish.yaml
      - client/**
      - docker/**
      - server/**
      - shared/**
      - worker/**
      - package.json
      - pnpm-lock.yaml
      - pnpm-workspace.yaml
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-handbrake-web:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: handbrake-web-server
            file: server/Dockerfile

          - image: handbrake-web-worker
            file: worker/Dockerfile

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Wait handbrake-build to finish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for the job 'handbrake-build' at '/repos/${{ github.repository }}/commits/${{ github.head_ref || github.ref }}/check-runs'" && \
          if [[ -z $( \
            gh api /repos/${{ github.repository }}/commits/${{ github.head_ref || github.ref }}/check-runs | \
            jq '.check_runs[] | select(.name=="handbrake-build")' \
          ) ]]; then \
            echo "The job 'handbrake-build' does not exist for this job."; \
          else \
            until [[ $( \
                gh api /repos/${{ github.repository }}/commits/${{ github.head_ref || github.ref }}/check-runs | \
                jq -r '.check_runs[] | select(.name=="handbrake-build") | .status' \
              ) = "completed" \
            ]]; \
            do \
              echo "Waiting for the job 'handbrake-build' to finish, checking again in 10s..." && sleep 10s; \
            done; \
            echo "The job 'handbrake-build' has finished!"; \
          fi;

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          # platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
          build-args: |
            DISTROLESS_VARIANT=${{ github.head_ref == '' && 'nonroot' || 'debug-nonroot' }}
            HANDBRAKE_BUILD_TAG=${{ github.event_name == 'pull_request' && 'dev' || 'latest'}}
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{matrix.image}}
          cache-to: type=gha,mode=max,scope=${{matrix.image}}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REPO_OWNER}}/${{ matrix.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
